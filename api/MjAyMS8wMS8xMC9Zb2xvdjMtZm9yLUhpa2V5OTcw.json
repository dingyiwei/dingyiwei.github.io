{"title":"Yolov3 for Hikey970 & Kirin980","date":"2021-01-10T15:11:28.000Z","date_formatted":{"ll":"Jan 10, 2021","L":"01/10/2021","MM-DD":"01-10"},"link":"2021/01/10/Yolov3-for-Hikey970","tags":["Android","深度学习"],"updated":"2021-01-10T17:53:07.440Z","content":"<p>本文主要介绍如何将 Yolov3 部署到 Hikey970 和 麒麟 980 上。</p>\n<h2 id=\"970-amp-980-介绍\">970 &amp; 980 介绍<a href=\"#970-amp-980-介绍\" title=\"970 &amp; 980 介绍\"></a></h2><p>Hikey970 是华为的一款嵌入式开发板，可用于监控的本地处理等任务。Kirin980 是华为 Mate20 的处理器。970 和 980 都有 NPU (Neural-network Processing Unit) 用于加速神经网络的处理速度，并且这两款芯片的官方系统都是安卓，而非普通 PC 和嵌入式设备的 Linux。</p>\n<p>为了将深度神经网络部署到 970 和 980 上，华为提供了 DDK v150 来转换模型。DDK v150 仅支持 caffe 和 tensorflow 的模型转换，且对 tensorflow 的支持不是很好。因此采用 caffe 模型对 970/980 来说是个更好的选择。</p>\n<h2 id=\"将-yolov3-转换为-caffe-模型\">将 Yolov3 转换为 caffe 模型<a href=\"#将-yolov3-转换为-caffe-模型\" title=\"将 Yolov3 转换为 caffe 模型\"></a></h2><p>在目标检测任务中，<a href=\"https://pjreddie.com/darknet/yolo/\" target=\"_blank\">Yolov3</a> 是一个常用的高效网络。然而它是由 <a href=\"https://pjreddie.com/darknet/\" target=\"_blank\">Darknet</a> 实现的，我们可以通过 <a href=\"https://github.com/dingyiwei/darknet2caffe\" target=\"_blank\">darknet2caffe</a> 这一工具将 Yolov3 转换成 caffe。但是这里存在两个问题：</p>\n<ul><li>Yolov3 存在 Upsample 层，<a href=\"https://github.com/dingyiwei/darknet2caffe\" target=\"_blank\">darknet2caffe</a> 也确实实现了这个 layer，但是 DDK v150 并不支持该上采样。</li>\n<li>Yolov3 有 3 个输出（Yolov3-tiny 有 2 个），但是 DDK 只支持单输入、单输出的模型。</li>\n</ul><p>对此，我们有两种策略：</p>\n<ol><li>只取 Yolov3 三个分支中分辨率最低的分支，<a href=\"#将-yolov3-裁成单分支\">见此节</a></li>\n<li>保留 Yolov3 的所有分支，<a href=\"#保留-yolov3-的多分支\">见此节</a></li>\n</ol><h2 id=\"将-yolov3-裁成单分支\">将 Yolov3 裁成单分支<a href=\"#将-yolov3-裁成单分支\" title=\"将 Yolov3 裁成单分支\"></a></h2><ol><li>通过 <a href=\"https://github.com/dingyiwei/darknet2caffe\" target=\"_blank\">darknet2caffe</a> 将 yolov3.cfg 和 yolov3.weights 转换成 yolov3.prototxt 和 yolov3.caffemodel；</li>\n<li>在 yolov3.prototxt 中删去需要上采样的两个分支；</li>\n<li>重新保存一下 yolov3.caffemodel<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> caffe</span><br><span class=\"line\"></span><br><span class=\"line\">net = caffe.Net(<span class=\"string\">'yolov3-pruned.prototxt'</span>, <span class=\"string\">'yolov3.caffemodel'</span>, caffe.TEST)</span><br><span class=\"line\">net.save(<span class=\"string\">'yolov3-pruned.caffemodel'</span>)</span><br></pre></td></tr></table></figure></li>\n<li>通过 DDK v150 提供的工具将模型转成 970/980 适配的形式；</li>\n<li>根据 DDK 提供的手册将模型打包进 app。</li>\n</ol><h2 id=\"保留-yolov3-的多分支\">保留 Yolov3 的多分支<a href=\"#保留-yolov3-的多分支\" title=\"保留 Yolov3 的多分支\"></a></h2><ol><li>用 <code>python darknet2caffe.py cfgfile weightfile protofile caffemodel --deconv</code> 生成 yolov3.prototxt 和 yolov3.caffemodel，<code>--deconv</code> 可以将 Upsample 替换成 <code>Deconvolution</code>；</li>\n<li>将 yolov3.prototxt 的分支存成 3 个文件，yolov3-1.prototxt、yolov3-2.prototxt、yolov3-3.prototxt，每个 prototxt 都包含了网络的特征提取部分和其中一个分支；</li>\n<li>用上一节描述的方法重新保存 3 个 caffemodel 文件；</li>\n<li>用 DDK 转换模型；</li>\n<li>将 3 个模型打包进 app，注意将 JNI 中的模型设置及指针换成 3 套。</li>\n</ol><h2 id=\"yolo-layer\">Yolo Layer<a href=\"#yolo-layer\" title=\"Yolo Layer\"></a></h2><p>见 <a href=\"https://github.com/dingyiwei/YoloLayer_in_Java\" target=\"_blank\">YoloLayer_in_Java</a>。</p>\n","next":{"title":"【转】常用数学符号的 LaTeX 表示方法","link":"2020/06/26/latex"},"plink":"https://dingyiwei.github.io/2021/01/10/Yolov3-for-Hikey970/","toc":[{"id":"970-amp-980-介绍","title":"970 &amp; 980 介绍","index":"1"},{"id":"将-yolov3-转换为-caffe-模型","title":"将 Yolov3 转换为 caffe 模型","index":"2"},{"id":"将-yolov3-裁成单分支","title":"将 Yolov3 裁成单分支","index":"3"},{"id":"保留-yolov3-的多分支","title":"保留 Yolov3 的多分支","index":"4"},{"id":"yolo-layer","title":"Yolo Layer","index":"5"}],"reward":true,"copyright":{"license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","author":"山猫","link":"<a href=\"https://dingyiwei.github.io/2021/01/10/Yolov3-for-Hikey970/\" title=\"Yolov3 for Hikey970 & Kirin980\">https://dingyiwei.github.io/2021/01/10/Yolov3-for-Hikey970/</a>"}}