{"title":"进程的内存分配","date":"2017-03-02T16:00:00.000Z","date_formatted":{"ll":"Mar 3, 2017","L":"03/03/2017","MM-DD":"03-03"},"link":"2017/03/03/进程的内存分配","tags":["操作系统","进程"],"updated":"2020-05-29T08:04:42.633Z","content":"<h2 id=\"内存中的进程\">内存中的进程<a href=\"#内存中的进程\" title=\"内存中的进程\"></a></h2><div class=\"φcz\"><div class=\"φdb\"><table><thead><tr>\n<th align=\"center\">段</th><th align=\"center\">内容</th></tr>\n</thead><tbody><tr>\n<td align=\"center\">栈</td><td align=\"center\">局部变量、子函数返回地址</td></tr>\n<tr>\n<td align=\"center\">堆</td><td align=\"center\">程序员分配（new、malloc）</td></tr>\n<tr>\n<td align=\"center\">数据</td><td align=\"center\">全局数据、静态变量</td></tr>\n<tr>\n<td align=\"center\">文本</td><td align=\"center\">指令</td></tr>\n</tbody></table></div></div><ul><li>各段相互独立，不可覆盖</li>\n<li>堆、栈、数据段可读可写不可执行</li>\n<li>代码段可读可执行不可写</li>\n</ul><h2 id=\"对各段地址排序\">对各段地址排序<a href=\"#对各段地址排序\" title=\"对各段地址排序\"></a></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *k = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> stackAddr = (<span class=\"keyword\">int</span>)&amp;j;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> heapAddr = (<span class=\"keyword\">int</span>)k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dataAddr = (<span class=\"keyword\">int</span>)&amp;a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> textAddr = (<span class=\"keyword\">int</span>)main;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> data[] = &#123; stackAddr,heapAddr,dataAddr,textAddr &#125;;</span><br><span class=\"line\">\tsort(data, data + <span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"string\">\". \"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (data[i] == stackAddr)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"stack \"</span> &lt;&lt; stackAddr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data[i] == heapAddr)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"heap \"</span> &lt;&lt; heapAddr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (data[i] == dataAddr)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"data \"</span> &lt;&lt; dataAddr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"text \"</span> &lt;&lt; textAddr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0. text 12129251</span><br><span class=\"line\">1. data 12178128</span><br><span class=\"line\">2. stack 15726924</span><br><span class=\"line\">3. heap 15850056</span><br></pre></td></tr></table></figure><h2 id=\"获得各段地址范围\">获得各段地址范围<a href=\"#获得各段地址范围\" title=\"获得各段地址范围\"></a></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> aAddr = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)&amp;a;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; hex;</span><br><span class=\"line\">\t<span class=\"comment\">// heap range</span></span><br><span class=\"line\">\tDWORD numOfHeaps = GetProcessHeaps(<span class=\"number\">0</span>, <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\tLPHANDLE heaps = <span class=\"keyword\">new</span> HANDLE[numOfHeaps];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (heaps != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tMEMORY_BASIC_INFORMATION memoryBasicInfo = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\tGetProcessHeaps(numOfHeaps, heaps);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numOfHeaps; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tVirtualQuery(heaps[i], &amp;memoryBasicInfo, <span class=\"keyword\">sizeof</span>(memoryBasicInfo));</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; (DWORD)memoryBasicInfo.BaseAddress &lt;&lt; <span class=\"string\">\" &lt;---- heap ----&gt;\"</span></span><br><span class=\"line\">\t\t\t\t&lt;&lt; (DWORD)memoryBasicInfo.BaseAddress + memoryBasicInfo.RegionSize</span><br><span class=\"line\">\t\t\t\t&lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// stack range</span></span><br><span class=\"line\">\tDWORD stackStart, stackEnd;</span><br><span class=\"line\">\t__asm MOV stackStart, ESP</span><br><span class=\"line\">\t__asm MOV stackEnd, EBP</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; stackStart &lt;&lt; <span class=\"string\">\" &lt;---- stack ----&gt; \"</span> &lt;&lt; stackEnd &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// PE header</span></span><br><span class=\"line\">\tHMODULE mobuleBase = GetModuleHandle(<span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">\tIMAGE_DOS_HEADER *dosHeader = (IMAGE_DOS_HEADER*)mobuleBase;</span><br><span class=\"line\">\tDWORD signature = *(DWORD*)((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)mobuleBase + dosHeader-&gt;e_lfanew);</span><br><span class=\"line\">\tIMAGE_FILE_HEADER *PEHeader =</span><br><span class=\"line\">\t\t(IMAGE_FILE_HEADER*)((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)mobuleBase + dosHeader-&gt;e_lfanew +</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">sizeof</span>(DWORD));</span><br><span class=\"line\">\tIMAGE_OPTIONAL_HEADER32 *optionalHeader =</span><br><span class=\"line\">\t\t(IMAGE_OPTIONAL_HEADER32*)((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)PEHeader+<span class=\"keyword\">sizeof</span>(IMAGE_FILE_HEADER));</span><br><span class=\"line\">\t<span class=\"comment\">// image base</span></span><br><span class=\"line\">\tDWORD imageBase = optionalHeader-&gt;ImageBase;</span><br><span class=\"line\">\t<span class=\"comment\">// traverse sections</span></span><br><span class=\"line\">\tIMAGE_SECTION_HEADER *section =</span><br><span class=\"line\">\t\t(IMAGE_SECTION_HEADER*)((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)PEHeader + <span class=\"keyword\">sizeof</span>(IMAGE_FILE_HEADER) +</span><br><span class=\"line\">\t\t\tPEHeader-&gt;SizeOfOptionalHeader);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; PEHeader-&gt;NumberOfSections; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; imageBase + section[i].VirtualAddress</span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"string\">\" &lt;---- \"</span> &lt;&lt; section[i].Name &lt;&lt; <span class=\"string\">\" ----&gt; \"</span></span><br><span class=\"line\">\t\t\t&lt;&lt; imageBase + section[i].VirtualAddress + section[i].Misc.VirtualSize</span><br><span class=\"line\">\t\t\t&lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fc0000 &lt;---- heap ----&gt; fd0000</span><br><span class=\"line\">9cfbd8 &lt;---- stack ----&gt; 9cfd8c</span><br><span class=\"line\">b41000 &lt;---- .textbss ----&gt; b51000</span><br><span class=\"line\">b51000 &lt;---- .text ----&gt; b5806a</span><br><span class=\"line\">b59000 &lt;---- .rdata ----&gt; b5b4be</span><br><span class=\"line\">b5c000 &lt;---- .data ----&gt; b5c724</span><br><span class=\"line\">b5d000 &lt;---- .idata ----&gt; b5e0f7</span><br><span class=\"line\">b5f000 &lt;---- .gfids ----&gt; b5f17f</span><br><span class=\"line\">b60000 &lt;---- .00cfg ----&gt; b60104</span><br><span class=\"line\">b61000 &lt;---- .rsrc ----&gt; b6143c</span><br><span class=\"line\">b62000 &lt;---- .reloc ----&gt; b626a9</span><br></pre></td></tr></table></figure>","prev":{"title":"Notes of 「Digging into self-supervised monocular depth estimation」","link":"2019/11/14/Digging-into-self-supervised-monocular-depth-estimation"},"next":{"title":"编译原理课设总结","link":"2017/01/18/编译原理课设总结"},"plink":"https://dingyiwei.github.io/2017/03/03/进程的内存分配/","toc":[{"id":"内存中的进程","title":"内存中的进程","index":"1"},{"id":"对各段地址排序","title":"对各段地址排序","index":"2"},{"id":"获得各段地址范围","title":"获得各段地址范围","index":"3"}],"copyright":{"license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","author":"山猫","link":"<a href=\"https://dingyiwei.github.io/2017/03/03/进程的内存分配/\" title=\"进程的内存分配\">https://dingyiwei.github.io/2017/03/03/进程的内存分配/</a>"}}